#!/bin/bash

# Usage: ./repackage_ipa.sh <source.ipa> <target.ipa> <provisioning_profile.mobileprovision> "<Signing Identity>" <ExpandedEntitlements.xcent>
# Example:
#   ./repackage_ipa.sh SourceApp.ipa TargetApp.ipa MyProfile.mobileprovision "Apple Development: Jane Doe (TEAMID)" ExpandedEntitlements.xcent
#
# Moves over the Info.plist and provisioning profile, re-signs the IPA while preserving the original executable.

# Exit on error
set -e

# Check input arguments
if [[ $# -ne 5 ]]; then
    echo "Usage: $(basename "$0") <source.ipa> <target.ipa> <provisioning_profile.mobileprovision> \"<Signing Identity>\" <ExpandedEntitlements.xcent>"
    exit 1
fi

SOURCE_IPA="$1"
TARGET_IPA="$2"
PROVISION_PATH="$3"
SIGN_ID="$4"
ENTITLEMENTS_FILE="$5"

# Validate files
for FILE in "$SOURCE_IPA" "$TARGET_IPA" "$PROVISION_PATH" "$ENTITLEMENTS_FILE"; do
    if [[ ! -f "$FILE" ]]; then
        echo "Error: Required file '$FILE' not found."
        exit 1
    fi
done

# Validate signing identity
if ! security find-identity -p codesigning -v | grep -q "$SIGN_ID"; then
    echo "Error: Signing identity '$SIGN_ID' not found in Keychain."
    exit 1
fi

# Create temporary directories
TMP_SRC=$(mktemp -d)
TMP_TGT=$(mktemp -d)
trap 'rm -rf "$TMP_SRC" "$TMP_TGT"' EXIT  # Cleanup on exit

# Extract source and target IPAs
echo "Extracting source IPA..."
unzip -q "$SOURCE_IPA" -d "$TMP_SRC"
echo "Extracting target IPA..."
unzip -q "$TARGET_IPA" -d "$TMP_TGT"

# Locate the .app directories
SRC_APP=$(find "$TMP_SRC/Payload" -type d -name "*.app" | head -n 1)
TGT_APP=$(find "$TMP_TGT/Payload" -type d -name "*.app" | head -n 1)

if [[ -z "$SRC_APP" || -z "$TGT_APP" ]]; then
    echo "Error: .app bundle not found in one or both IPAs."
    exit 1
fi
echo "Found source app bundle: $SRC_APP"
echo "Found target app bundle: $TGT_APP"

# Replace the provisioning profile in the target app
echo "Replacing provisioning profile..."
cp "$PROVISION_PATH" "$TGT_APP/embedded.mobileprovision"

# Replace Info.plist from source app
echo "Replacing Info.plist from source IPA..."
cp "$SRC_APP/Info.plist" "$TGT_APP/Info.plist"

# Ensure Info.plist is properly formatted
plutil -convert binary1 "$TGT_APP/Info.plist"

# Remove old signature data from the target app
echo "Stripping old signature..."
rm -rf "$TGT_APP/_CodeSignature" 2>/dev/null

# Ensure frameworks are properly signed
if [[ -d "$TGT_APP/Frameworks" ]]; then
    echo "Signing frameworks..."
    for FRAMEWORK in "$TGT_APP/Frameworks/"*.framework; do
        codesign -f -s "$SIGN_ID" --preserve-metadata=identifier,entitlements "$FRAMEWORK"
    done
fi

# Re-sign the app bundle with entitlements
echo "Re-signing the app with '$SIGN_ID'..."
codesign -f -s "$SIGN_ID" --entitlements "$ENTITLEMENTS_FILE" --preserve-metadata=identifier,entitlements "$TGT_APP"

# Repackage the IPA
NEW_IPA="${TARGET_IPA%.ipa}-resigned.ipa"
echo "Repackaging IPA..."
cd "$TMP_TGT"
zip -qr "../$NEW_IPA" Payload
cd -

echo "Success! New IPA created: $NEW_IPA"

# Optional: Install the IPA to a connected iPhone
if command -v ios-deploy >/dev/null 2>&1; then
    echo "Installing IPA to iPhone..."
    ios-deploy --bundle "$TGT_APP" || echo "Installation via ios-deploy failed. Ensure Developer Mode is enabled on your iPhone."
elif command -v ideviceinstaller >/dev/null 2>&1; then
    echo "Installing IPA to iPhone using ideviceinstaller..."
    ideviceinstaller -i "$NEW_IPA" || echo "Installation failed. Ensure your provisioning profile is correct."
else
    echo "No installation tool found. You can manually install '$NEW_IPA'."
fi

echo "Done."
