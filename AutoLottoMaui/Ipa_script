#!/bin/bash

# Usage: ./repackage_ipa.sh <original.ipa> <provisioning_profile.mobileprovision> "<Signing Identity>" <ExpandedEntitlements.xcent>
# Example:
#   ./repackage_ipa.sh OldApp.ipa MyProfile.mobileprovision "Apple Development: Jane Doe (TEAMID)" ExpandedEntitlements.xcent
#
# Replaces provisioning profile, Info.plist, and re-signs an IPA while preserving the original executable.

# Exit on error
set -e

# Check input arguments
if [[ $# -ne 4 ]]; then
    echo "Usage: $(basename "$0") <original.ipa> <provisioning_profile.mobileprovision> \"<Signing Identity>\" <ExpandedEntitlements.xcent>"
    exit 1
fi

IPA_PATH="$1"
PROVISION_PATH="$2"
SIGN_ID="$3"
ENTITLEMENTS_FILE="$4"

# Validate files
if [[ ! -f "$IPA_PATH" ]]; then
    echo "Error: IPA file '$IPA_PATH' not found."
    exit 1
fi

if [[ ! -f "$PROVISION_PATH" ]]; then
    echo "Error: Provisioning profile '$PROVISION_PATH' not found."
    exit 1
fi

if [[ ! -f "$ENTITLEMENTS_FILE" ]]; then
    echo "Error: Entitlements file '$ENTITLEMENTS_FILE' not found."
    exit 1
fi

# Validate signing identity
if ! security find-identity -p codesigning -v | grep -q "$SIGN_ID"; then
    echo "Error: Signing identity '$SIGN_ID' not found in Keychain."
    exit 1
fi

# Create working directories
TMP_DIR=$(mktemp -d)
trap 'rm -rf "$TMP_DIR"' EXIT  # Cleanup on script exit

# Extract IPA contents
echo "Extracting IPA..."
unzip -q "$IPA_PATH" -d "$TMP_DIR"

# Locate the .app directory
APP_DIR=$(find "$TMP_DIR/Payload" -type d -name "*.app" | head -n 1)
if [[ -z "$APP_DIR" ]]; then
    echo "Error: .app bundle not found in IPA."
    exit 1
fi
echo "Found app bundle: $APP_DIR"

# Replace the provisioning profile
echo "Replacing provisioning profile..."
cp "$PROVISION_PATH" "$APP_DIR/embedded.mobileprovision"

# Extract Info.plist (optional, keeping original structure)
echo "Extracting and converting Info.plist..."
plutil -convert xml1 "$APP_DIR/Info.plist" -o "$TMP_DIR/Info.xml"

# Convert back to binary to ensure compatibility
plutil -convert binary1 "$TMP_DIR/Info.xml" -o "$APP_DIR/Info.plist"

# Remove old signature data
echo "Stripping old signature..."
rm -rf "$APP_DIR/_CodeSignature" 2>/dev/null

# Ensure frameworks are properly signed
if [[ -d "$APP_DIR/Frameworks" ]]; then
    echo "Signing frameworks..."
    for FRAMEWORK in "$APP_DIR/Frameworks/"*.framework; do
        codesign -f -s "$SIGN_ID" --preserve-metadata=identifier,entitlements "$FRAMEWORK"
    done
fi

# Re-sign the app bundle with entitlements
echo "Re-signing the app with '$SIGN_ID'..."
codesign -f -s "$SIGN_ID" --entitlements "$ENTITLEMENTS_FILE" --preserve-metadata=identifier,entitlements "$APP_DIR"

# Repackage the IPA
NEW_IPA="${IPA_PATH%.ipa}-resigned.ipa"
echo "Repackaging IPA..."
cd "$TMP_DIR"
zip -qr "../$NEW_IPA" Payload
cd -

echo "Success! New IPA created: $NEW_IPA"

# Optional: Install the IPA to a connected iPhone
if command -v ios-deploy >/dev/null 2>&1; then
    echo "Installing IPA to iPhone..."
    ios-deploy --bundle "$APP_DIR" || echo "Installation via ios-deploy failed. Ensure Developer Mode is enabled on your iPhone."
elif command -v ideviceinstaller >/dev/null 2>&1; then
    echo "Installing IPA to iPhone using ideviceinstaller..."
    ideviceinstaller -i "$NEW_IPA" || echo "Installation failed. Ensure your provisioning profile is correct."
else
    echo "No installation tool found. You can manually install '$NEW_IPA'."
fi

echo "Done."
